default_platform(:ios)

desc "Runs the unit tests to ensure the build is working"
lane :test do
  scan(scheme: ENV["TEST_SCHEME"], devices: ["iPhone SE"], clean: true)
end

desc "Cuts a new release and distributes it on CocoaPods and Carthage"
lane :release do

  UI.message "Fetching latest tag"

  # Fetch the latest tag that would have just been added
  sh('git fetch --tags')
  last_tag = last_git_tag
  if !last_tag
    UI.user_error! "--- ERROR: Was unable to locate any git tags. ---"
    next
  end

  UI.success "Latest tag found is #{last_tag}"

  # Verify the tag conforms to semantic versioning
  latest_version = last_tag.scan(/[vV]?(\d{1,3}\.\d{1,3}\.\d{1,3})/).last.first
  if !latest_version
    UI.success "--- Latest tag doesn't appear to be a new version. Ignoring. ---"
    next
  end

  UI.success "--- Found latest tag version: #{latest_version} ---"

  UI.message "Extracting Release Notes from CHANGELOG"

  # Load the Release Notes from file, and throw an error if they weren't updated
  changelog_contents = File.read("../CHANGELOG.md")
  v = latest_version.split(".")
  release_notes = changelog_contents.scan(/#{v[0]}\.#{v[1]}\.#{v[2]}\ [Rr]elease\ [Nn]otes.*\n\=+\n([\s\S]*?)(\d{1,3}\.\d{1,3}\.\d{1,3}\ [Rr]elease\ [Nn]otes.*\n\=+\n|\Z)/).last
  if !release_notes 
    UI.user_error! "--- ERROR: Unable to find Release Notes entry for v#{latest_version} in CHANGELOG. ---"
    next
  end

  UI.message "Uploading to GitHub Releases"

  # Publish the Release on GitHub
  set_github_release(repository_name: ENV["REPO_PATH"], 
                      api_token: ENV["GITHUB_TOKEN"],
                      name: "v#{latest_version}",
                      tag_name: latest_version,
                      description: release_notes.first)

  # Update the Podspec version and push to the repo
  podspec_version = version_get_podspec(path: ENV["PODSPEC_PATH"])
  if podspec_version != latest_version
    UI.message "Updating Podspec version"
    version_bump_podspec(path: ENV["PODSPEC_PATH"], version_number: latest_version)
    commit_file(repo_name: ENV["REPO_PATH"], file_path: ENV["PODSPEC_PATH"], commit_message: "Bumped Podspec Version to v#{latest_version}")
  end

  # Publish to CocoaPods trunk (This will fall-through if this release has previously been pushed)
  begin 
    pod_push(use_bundle_exec: true, allow_warnings: true)
  rescue => ex
    UI.error(ex)
  end

  # Update and push framework version number if the current version doesn't match
  framework_version = get_info_plist_value(path: ENV["FRAMEWORK_PLIST_PATH"], key: "CFBundleShortVersionString")
  if framework_version != latest_version
    UI.message "Updating framework version"
    set_info_plist_value(path: ENV["FRAMEWORK_PLIST_PATH"], key: "CFBundleShortVersionString", value: latest_version)
    commit_file(repo_name: ENV["REPO_PATH"], file_path: ENV["FRAMEWORK_PLIST_PATH"], commit_message: "Bumped Framework Version to v#{latest_version}")
  end
end

desc "Using the GitHub Web API, commit the local contents of a file to master via a bot account"
lane :commit_file do |options|
  repo_name = options[:repo_name]
  file_path = options[:file_path]
  message = options[:commit_message]

  # Fetch the file so we can extract the sha
  result = Fastlane::Actions::GithubApiAction.run(
    api_token: ENV["GITHUB_TOKEN"],
    path: "/repos/#{repo_name}/contents/#{file_path}",
    error_handlers: {
      '*' => proc do |result|
        UI.error("GitHub responded with #{result[:status]}:#{result[:body]}")
      end
    }
  )

  # Check the sha value was returned
  sha = result[:json]["sha"]
  if !sha 
    UI.error("Was unable to find sha value for #{file_path}")
  end

  # Encode the content as base 64
  content = Base64.encode64(File.read("../#{file_path}"))
  author = {"name": "XD-CI", email: ENV["AUTHOR_EMAIL"]}

  # Upload the local copy of that file back up
  result = Fastlane::Actions::GithubApiAction.run(
    api_token: ENV["GITHUB_TOKEN"],
    http_method: "PUT",
    path: "/repos/#{repo_name}/contents/#{file_path}",
    body: {"message": message, "sha": sha, "content": content, "author": author, "committer": author},
    error_handlers: {
      '*' => proc do |result|
        UI.error("GitHub responded with #{result[:status]}:#{result[:body]}")
      end
    }
  )
end